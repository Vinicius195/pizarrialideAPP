// src/app/api/test-notification/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { getAuth } from 'firebase-admin/auth';
import { db as firestoreAdmin } from '@/lib/firebase-admin'; // Corrigido: importando 'db' e renomeando localmente
import { sendNotification } from '@/lib/fcm';

/**
 * Rota de API para enviar uma notifica√ß√£o de teste para o usu√°rio autenticado.
 * 
 * @param req A requisi√ß√£o Next.js, que deve conter um token de autoriza√ß√£o.
 * @returns Uma resposta JSON indicando o sucesso ou a falha do envio.
 */
export async function GET(req: NextRequest) {
  // A inicializa√ß√£o do Firebase Admin agora √© feita automaticamente no m√≥dulo 'firebase-admin'.

  // 1. Autenticar o usu√°rio a partir do token no cabe√ßalho
  const authToken = req.headers.get('authorization')?.split('Bearer ')[1];
  if (!authToken) {
    return NextResponse.json({ error: 'Token de autentica√ß√£o n√£o fornecido.' }, { status: 401 });
  }

  let decodedToken;
  try {
    decodedToken = await getAuth().verifyIdToken(authToken);
  } catch (error) {
    console.error('Erro ao verificar o token de autentica√ß√£o:', error);
    return NextResponse.json({ error: 'Token de autentica√ß√£o inv√°lido.' }, { status: 403 });
  }

  const userId = decodedToken.uid;

  try {
    // 2. Buscar o token FCM do usu√°rio no Firestore
    const userDocRef = firestoreAdmin.collection('users').doc(userId);
    const userDoc = await userDocRef.get();

    if (!userDoc.exists) {
      return NextResponse.json({ error: 'Usu√°rio n√£o encontrado no Firestore.' }, { status: 404 });
    }

    const userData = userDoc.data();
    const fcmToken = userData?.fcmToken;

    if (!fcmToken) {
      return NextResponse.json({ error: 'O usu√°rio n√£o possui um token FCM registrado. Ative as notifica√ß√µes no app.' }, { status: 400 });
    }

    // 3. Preparar e enviar a notifica√ß√£o de teste
    const testPayload = {
      title: 'Notifica√ß√£o de Teste üöÄ',
      body: 'Se voc√™ recebeu esta mensagem, o sistema est√° funcionando!',
      click_action: '/pedidos', // Redireciona para a p√°gina de pedidos ao clicar
    };

    await sendNotification(fcmToken, testPayload);

    // 4. Retornar uma resposta de sucesso
    return NextResponse.json({ success: true, message: `Notifica√ß√£o de teste enviada para o usu√°rio ${userId}.` });

  } catch (error: any) {
    console.error('Erro inesperado ao enviar notifica√ß√£o de teste:', error);
    return NextResponse.json({ error: 'Falha ao enviar a notifica√ß√£o de teste.', details: error.message }, { status: 500 });
  }
}
